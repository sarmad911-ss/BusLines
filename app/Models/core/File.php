<?php

namespace App\Models\core;

use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;

/**
 * Class File
 * @package App\Models
 *
 * @property integer id
 * @property string path - File path from /storage. Default /
 * @property string name - File name
 * @property integer size - File size in Bytes
 * @property string src - Relative file url
 * @property string url - Full file url
 * @property string fullPath - Full path to file
 * @property UploadedFile file - Setter to save file
 */
class File extends AcsimaModel
{

    protected $fillable = ['path', 'name', 'size'];
    private $file, $src;
    private $defaultWidth = 800;

    public static function getList($folder = "")
    {
        $listFiles = [];
        $listDirs = [];
        if (!file_exists(\App::basePath() . "/storage/app/public/uploads"))
            mkdir(\App::basePath() . "/storage/app/public/uploads");
        $path = \App::basePath() . "/storage/app/public/uploads/" . $folder;
        if (!file_exists($path))
            return collect([]);
        $files = scandir($path);
        foreach ($files as $file) {
            if ($file == "." || $file == "..") continue;
            $data = ['type' => "", 'size' => "", 'name' => $file, 'path' => $path . "/" . $file, 'url' => url("storage/uploads/" . $folder . "/" . $file)];
            $data['type'] = is_dir($path . "/" . $file) ? "folder" : "file";
            $data['id'] = null;

            if ($data['type'] == "file") {
                $fileData = File::where("name", $file)->get()->first();
                if (empty($fileData)) continue;
                $data['id'] = $fileData->id ?? null;
                $data['size'] = floor(($fileData->size ?? 0) / 1024) . " kb";
            }
            if ($data['type'] == "file")
                $listFiles[] = $data;
            else
                $listDirs[] = $data;
        }
        $listDirs = collect($listDirs)->sortBy("name");
        $listFiles = collect($listFiles)->sortBy("name");
        $list = $listDirs->merge($listFiles);
        return $list;
    }

    /**
     * @param string $path
     *
     * Create sub folder by folder name or path.
     *
     */
    public static function createDir($path)
    {
        mkdir(\App::basePath() . "/storage/app/public/uploads/" . $path);
    }

    public function setFileAttribute(UploadedFile $file)
    {
        /** Remove old file in case of edit */
        if(!empty($this->id)){
            \Storage::delete("public" . $this->path . $this->name);
        }
        $name = $file->getClientOriginalName() ?? $this->name;
        if (file_exists(\App::basePath() . "/storage/app/public" . $this->path . $name))
            $name = time() . "_" . $file->getClientOriginalName();
        $size = $file->getSize();
        $file->storeAs("public" . $this->path, $name);
        $this->attributes['name'] = $name;
        $this->attributes['size'] = $size;
    }

    public function getSrcAttribute()
    {
        return "/storage/" . ($this->attributes['path'] ?? "") . $this->attributes['name'];
    }

    public function getUrlAttribute()
    {
        return url("storage" . ($this->attributes['path'] ?? "") . $this->name);
    }

    public function getFullPathAttribute()
    {
        return Storage::path("public/" . $this->attributes['path'] . $this->name);
    }

    /**
     * @param string $name
     * @return bool
     *
     * Rename file name
     */
    public function rename($name)
    {
        $unique = File::where("name", $name)->get()->count();
        if ($unique) return false;
        Storage::move('public/' . $this->path . $this->name, 'public/' . $this->path . $name);
        $this->name = $name;
        $this->save();
        return true;
    }

    /**
     * @return bool|null
     * @throws \Exception
     *
     * Delete File from storage and database
     */
    public function delete()
    {
        \Storage::delete("public" . $this->path . $this->name);
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    /**
     * @param null|string $text
     * @return bool
     * Add watermark to photo
     */
    public function watermarkPhoto($text = null)
    {
        $text = $text ?? "acsima.com";
        $file = $this;
        $ext = pathinfo($file->name, PATHINFO_EXTENSION);
        switch ($ext) {
            case "jpg":
            case "jpeg":
                $image = imagecreatefromjpeg($file->path);
                break;
            case "png":
                $image = imagecreatefrompng($file->path);
                break;
            case "bmp":
                $image = imagecreatefrombmp($file->path);
                break;
            default:
                return false;
        }
        $this->resizeImage($image, $this->defaultWidth);
        $y = imagesy($image) - 7 - 21;
        $color = imagecolorallocatealpha($image, 255, 255, 255, 63);
        $this->ImageAddWatermark($image, 8, $y, 5, $color, $text);
        header("Content-type: image/png");
        imagepng($image);
    }

    private function resizeImage(&$img, $width)
    {
        $sizeX = imagesx($img);
        $sizeY = imagesy($img);
        $ratio = $sizeY / $sizeX;
        $height = $width * $ratio;
        $dst = imagecreatetruecolor($width, $height);
        imagecopyresampled($dst, $img, 0, 0, 0, 0, $width, $height, $sizeX, $sizeY);
        $img = $dst;
    }

    private function ImageAddWatermark(&$im, $x1, $y1, $radius, $color, $text, $textsize = 9)
    {
        $textsize = $textsize * 4;
        $font = public_path() . "/fonts/lato-italic-cyr.ttf";
        $box = imagettfbbox($textsize, 0, $font, $text);

        $borderX = 12 * 4;
        $borderY = 16 * 4;
        $w = $box[2] - $box[0] + $borderX * 2;
        $h = $box[1] - $box[7] + 46;

        $radius = $radius * 4;
        $image = imagecreatetruecolor($w, $h);
        imagesavealpha($image, true);
        imagefill($image, 0, 0, imagecolorallocatealpha($image, 0, 0, 0, 127));
        $back = imagecolorallocatealpha($image, 0, 0, 0, 0);

        imagefilledrectangle($image, $radius, 0, $w - $radius, $h - 1, $back);
        imagefilledrectangle($image, 0, $radius, $w - 1, $h - $radius - 1, $back);

        imagefilledellipse($image, $radius, $radius, $radius * 2, $radius * 2, $back);
        imagefilledellipse($image, $w - $radius - 1, $radius, $radius * 2, $radius * 2, $back);
        imagefilledellipse($image, $radius, $h - $radius - 1, $radius * 2, $radius * 2, $back);
        imagefilledellipse($image, $w - $radius - 1, $h - $radius - 1, $radius * 2, $radius * 2, $back);

        imagefill($image, round($w / 2), round($h / 2), $color);

        $color = imagecolorallocatealpha($image, 0, 0, 0, 63);
        imagettftext($image, $textsize, 0, $borderX, $borderY, $color, $font, $text);

        imagecopyresampled($im, $image, $x1, $y1, 0, 0, round($w / 4), round($h / 4), $w, $h);
    }

    public function getPdfAttribute()
    {
        $acceptedFormats = ['docx', 'doc'];
        /** check if valid file format = docx/doc */
        $format = explode('.', $this->name)[1];
        if(!in_array($format, $acceptedFormats)){
            return null;
        }
        return route('storePdfAction', ['path' => $this->fullPath]);
    }
}
